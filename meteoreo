#!/usr/bin/env python3

import os
import sys
import time
import logging
import argparse
import config.sentry  # Automatic sentry error reporting and logging
from app.lib.reporter import Reporter  # Main logic class

# Load dotenv
from dotenv import load_dotenv
load_dotenv()

parser = argparse.ArgumentParser(description='Meteo scanner & reporter')

parser.add_argument(
    '--scan', '-s', help='Scans the given station to force the genreation of a incident if necessary', action='store_true')
parser.add_argument(
    '--frecuency', '-f', help='Frecuency of the scan in seconds', type=int)
parser.add_argument(
    '--report', '-r', help='Report via CLI the status of a given station', type=str, default=None)
parser.add_argument(
    '--refresh-stations', help='Refresh the list of services of the stations', action='store_true')
parser.add_argument(
    '--user', '-u', help='(optional) User to connect to the station', type=str, default=None)
parser.add_argument(
    '--password', '-p', help='(optional) Password to use for the report', type=str, default=None)
parser.add_argument(
    '--station', '-t', help='Station to report data on (if not provided, it will scan all stations)', type=str, default=None)
parser.add_argument(
    '--verbose', '-v', help='Verbose mode', action='store_true')
parser.add_argument(
    '--debug', '-d', help='Debug mode', action='store_true')

args = parser.parse_args()

# If the script is not called directly, then throw an error
if __name__ != "__main__":
    sys.stderr.write("This script is meant to be called directly.\n")
    sys.exit(1)

# Define the global logging configuration.
# If the verbose flag is set, the logging level will output everything to stdout
formatter = logging.Formatter(
    "%(asctime)s %(module)s %(name)s.%(funcName)s +%(lineno)s: %(levelname)-8s [%(process)d] %(message)s"
    # "%(asctime)s [%(threadName)-12.12s] [%(levelname)-5.5s]  %(message)s"
)

if args.debug:
  logging_level = logging.DEBUG
elif args.verbose:
  logging_level = logging.INFO
else:
  logging_level = logging.WARNING

logging.basicConfig(
    level=logging_level
)

rootLogger = logging.getLogger()

# TODO: Make the folder location configurable
fileHandler = logging.FileHandler("{0}/{1}.log".format("logs/", "meteoreo"))
fileHandler.setFormatter(formatter)
rootLogger.addHandler(fileHandler)

consoleHandler = logging.StreamHandler()
consoleHandler.setFormatter(formatter)
rootLogger.addHandler(consoleHandler)

# Show argparse help if no arguments are provided
if not args.scan and not args.report:
  parser.print_help()
  sys.exit(1)

if args.scan:
  # Get the frecuency from the args, or use the env variable, or use the default (60 seconds)
  if not hasattr(args, 'frequency'):
    scan_frequency = int(os.getenv('SCAN_FREQUENCY', 60))
  else:
    scan_frequency = args.frequency

  # This method should be called from systemd, expecting it to never return
  while True:
    print("Running reporter every {0} seconds".format(scan_frequency))
    reporter = Reporter()
    reporter.routine()

    print("Done. Sleeping for {0} seconds".format(scan_frequency))
    time.sleep(scan_frequency)

if args.report:
  import lib.drivers.davis
  try:
    status = lib.drivers.davis.RpiDavisStation(
        args.report, 22,
        args.user, args.password)
    status.connect()
    status.get_services()
  except Exception as e:
    print("Error: %s" % e)
  finally:
    print("La estación %s está funcionando correctamente" % args.report)

if args.refresh_stations:
  r = Reporter()
  r.refresh_stations()
