#!/usr/bin/env python3

import sys
import logging
import argparse
import config.sentry  # Automatic sentry error reporting and logging
from lib.reporter import Reporter  # Main logic class

parser = argparse.ArgumentParser(description='Meteo scanner & reporter')

parser.add_argument(
    '--scan', '-s', help='Scans the given station to force the genreation of a incident if necessary', action='store_true')
parser.add_argument(
    '--report', '-r', help='Report via CLI the status of a given station', type=str, default=None)
parser.add_argument(
    '--user', '-u', help='(optional) User to connect to the station', type=str, default=None)
parser.add_argument(
    '--password', '-p', help='(optional) Password to use for the report', type=str, default=None)
parser.add_argument(
    '--station', '-t', help='Station to report data on (if not provided, it will scan all stations)', type=str, default=None)
parser.add_argument(
    '--verbose', '-v', help='Verbose mode', action='store_true')
parser.add_argument(
    '--debug', '-d', help='Debug mode', action='store_true')

args = parser.parse_args()

# Define the global logging configuration.
# If the verbose flag is set, the logging level will output everything to stdout
formatter = logging.Formatter(
    "%(asctime)s %(module)s %(name)s.%(funcName)s +%(lineno)s: %(levelname)-8s [%(process)d] %(message)s"
    # "%(asctime)s [%(threadName)-12.12s] [%(levelname)-5.5s]  %(message)s"
)

logging.basicConfig(
    level=logging.WARNING if not args.verbose else logging.INFO if args.debug else logging.DEBUG
)

rootLogger = logging.getLogger()

# TODO: Make the folder location configurable
fileHandler = logging.FileHandler("{0}/{1}.log".format("logs/", "meteoreo"))
fileHandler.setFormatter(formatter)
rootLogger.addHandler(fileHandler)

consoleHandler = logging.StreamHandler()
consoleHandler.setFormatter(formatter)
rootLogger.addHandler(consoleHandler)

# Show argparse help if no arguments are provided
if not args.scan and not args.report:
  parser.print_help()
  sys.exit(1)

if args.scan:
  r = Reporter()
  r.routine()

if args.report:
  import lib.drivers.davis
  try:
    status = lib.drivers.davis.RpiDavisStation(
        args.report, 22,
        args.user, args.password)
    status.connect()
    status.get_services()
  except Exception as e:
    print("Error: %s" % e)
  finally:
    print("La estación %s está funcionando correctamente" % args.report)
